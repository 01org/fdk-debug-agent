/*
 * Copyright (c) 2015, Intel Corporation
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#include <System/Streamer.hpp>
#include <TestCommon/TestHelpers.hpp>
#include "catch.hpp"
#include <ostream>
#include <string>
#include <stdexcept>

using namespace debug_agent::system;

/**
 * StreamerTest is a subclass of Streamer which allows to test the Streamer class.
 * It generates a simple stream which streams out a given number of unsigned integer from 0.
 * The integers are streamed out formatted. Once the number of iterations is reached, the
 * StreamerTest stops the stream.
 * The StreamerTest also provides the expected stream to be compared with the one it will generate
 * through Streamer.
 */
class StreamerTest : public Streamer
{
public:
    StreamerTest(size_t iterations)
        : mIterations(iterations), mIteration(0), mExpectedStream(), mFirstCalled(false)
    {
        // Compute expected stream
        for (size_t i = 0; i < iterations; ++i) {

            mExpectedStream << i;
        }
    }

    void streamFirst(std::ostream &) override
    {
        // Shall be called only once, before streamNext
        CHECK(mIteration == 0);
        CHECK(mFirstCalled == false);
        mFirstCalled = true;
    }

    bool streamNext(std::ostream &os) override
    {
        if (mIteration < mIterations) {

            // Test streams is just mIteration streamed out (formatted)
            os << mIteration++;
            return true;
        } else {

            // Test stream end
            return false;
        }
    }

    const std::stringstream &getExpectedStream() { return mExpectedStream; }

    const size_t mIterations;
    size_t mIteration;
    std::stringstream mExpectedStream;
    bool mFirstCalled;
};

/**
 * This test runs the StreamerTest::operator<<() in order to check that its Streamer parent class
 * will exercise it as expected. The streams generated by StreamerTest::operator<<() is then
 * compared with the expected one.
 */
TEST_CASE("Test stream", "[stream]")
{
    StreamerTest streamer(50);
    std::stringstream outStream;

    CHECK_NOTHROW(outStream << streamer);

    CHECK(outStream.str() == streamer.getExpectedStream().str());
}
